//
//  NoteDetailsInteractor.swift
//  S.Kh_Task_26
//
//  Created by Saba Khitaridze on 25.08.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NoteDetailsBusinessLogic {
    var noteId: String? { get }
    func addNote(withTitle: String, withText: String)
    func getNote(withId id: UUID)
    func editNote(withId id: UUID, newTitle: String, newText: String)
    
}


class NoteDetailsInteractor {
    var noteId: String?
    var presenter: NoteDetailsPresentationLogic?
    var worker: NoteDetailsWorker?
    
}

extension NoteDetailsInteractor: NoteDetailsBusinessLogic {
    
    func addNote(withTitle: String, withText: String) {
        do {
            let _ = try NoteStorageManager.shared.addNewNote(withTitle: withTitle, withText: withText)
        } catch {
            print(StorageManagerError.addFailed)
        }
    }
    
    func getNote(withId id: UUID) {
        worker = NoteDetailsWorker()
        
        worker?.getNote(withId: id, completion: { result in
            switch result {
            case .success(let note):
                presenter?.present(note: note)
            case .failure(let error):
                presenter?.didFailPresentNote(withError: error.localizedDescription)
            }
        })
    }
    
    func editNote(withId id: UUID, newTitle: String, newText: String) {
        do {
            try NoteStorageManager.shared.edit(note: editNoteHelper(noteId: id)) { note in
                note.title = newTitle
                note.text = newText
            }
        } catch {
            print(StorageManagerError.editFailed)
        }
    }
    
    private func editNoteHelper(noteId: UUID) -> Note {
        worker = NoteDetailsWorker()
        var noteToEdit = Note()
        
        worker?.getNote(withId: noteId, completion: { result in
            switch result {
            case .success(let note):
                noteToEdit = note
            case .failure(_):
                print(StorageManagerError.editFailed)
            }
        })
        
        return noteToEdit
    }
    
}
