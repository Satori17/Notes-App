//
//  NotesViewController.swift
//  S.Kh_Task_26
//
//  Created by Saba Khitaridze on 25.08.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NotesDisplayLogic: AnyObject {
    func display(notes: [Note])
    func didFailDisplayNotes(withError message: StorageManagerError)
}

class NotesViewController: UIViewController {
    
    //MARK: - IBOutlets
    
    @IBOutlet weak var notesTableView: UITableView!
    
    //MARK: - Vars
    var interactor: NotesBusinessLogic?
    var router: NotesRoutingLogic?
    var notes: [Note] = [] {
        didSet {
            notesTableView.reloadData()
        }
    }
    
    // MARK: View lifecycle
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        NotesConfigurator.configure(vc: self)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        notesTableView.registerNib(class: NoteCell.self)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        fetchNotes()
    }
    
    //MARK: - IBAction
    
    @IBAction func addNoteBtnPressed(_ sender: UIBarButtonItem) {
        router?.routeToNoteDetails(with: nil, isEditing: false)
    }
    
    //MARK: - Methods
    
    func fetchNotes() {
        interactor?.fetchNotes()
    }
    
}

//MARK: - Display Logic & Add to favorites Protocol

extension NotesViewController: NotesDisplayLogic, FavoriteNotesDelegate {
    
    func addFavoriteNote(cell: NoteCell) {
        if let indexPath = notesTableView.indexPath(for: cell) {
            let currentNote = notes[indexPath.row]
            interactor?.addNoteToFavorites(note: currentNote)
        }
    }
    
    func removeFavoriteNote(cell: NoteCell) {
        if let indexPath = notesTableView.indexPath(for: cell) {
            let currentNote = notes[indexPath.row]
            interactor?.removeNoteFromFavorites(note: currentNote)
        }
    }
    
            
    func display(notes: [Note]) {
        self.notes = notes
    }
    
    func didFailDisplayNotes(withError message: StorageManagerError) {
        print(message)
    }
    
}

//MARK: - TableView Delegate & DataSource

extension NotesViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        notes.count
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        80
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(forIndexPath: indexPath) as NoteCell
        let currentNote = notes[indexPath.row]
        cell.configure(with: currentNote)
        cell.delegate = self
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        let currentNote = notes[indexPath.row]
        router?.routeToNoteDetails(with: currentNote.id, isEditing: true)
    }
    
    func tableView(_ tableView: UITableView, editingStyleForRowAt indexPath: IndexPath) -> UITableViewCell.EditingStyle {
        .delete
    }
    
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        if editingStyle == .delete {
            let currentNote = notes[indexPath.row]
            guard let noteId = currentNote.id else { return }
            interactor?.removeNote(withID: noteId)
            self.notes.remove(at: indexPath.row)
            self.notesTableView.reloadData()
        }
    }
    
}
