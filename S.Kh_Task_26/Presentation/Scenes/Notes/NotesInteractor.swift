//
//  NotesInteractor.swift
//  S.Kh_Task_26
//
//  Created by Saba Khitaridze on 25.08.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NotesBusinessLogic {
    func fetchNotes()
    func removeNote(withID id: UUID)
    func addNoteToFavorites(note: Note)
    func removeNoteFromFavorites(note: Note)
}


class NotesInteractor {
    var presenter: NotesPresentationLogic?
    var worker: NotesWorker?
    
}

extension NotesInteractor: NotesBusinessLogic {
    
    func fetchNotes() {
        worker = NotesWorker()
        
        worker?.getNotes(completion: { result in
            switch result {
            case .success(let notes):
                let response = NoteModel.Response(notes: notes)
                presenter?.presentNotes(response: response)
            case .failure(let error):
                presenter?.didFailPresentNotes(withError: error)
            }
        })       
    }
    
    func removeNote(withID id: UUID) {
        do {
            try NoteStorageManager.shared.removeNote(with: id)
        } catch {
            print(StorageManagerError.removeFailed)
        }
    }
    
    func addNoteToFavorites(note: Note) {
        do {
            try NoteStorageManager.shared.addToFavorites(note: note)
        } catch {
            print(StorageManagerError.addToFavoritesFailed)
        }
    }
    
    func removeNoteFromFavorites(note: Note) {
        do {
            try NoteStorageManager.shared.removeToFavorites(note: note)
        } catch {
            print(StorageManagerError.removeFailed)
        }
    }
    
}
